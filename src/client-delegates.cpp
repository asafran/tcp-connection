//-----------------------------------------------------------------------------
//
//      Классы представителей(делегатов) клиентов на сервере
//      (c) РГУПС, ВЖД 30/11/2017
//      Разработал: Ковшиков С. В.
//
//-----------------------------------------------------------------------------
/*!
 *  \file
 *  \brief Классы представителей(делегатов) клиентов на сервере
 *  \copyright РГУПС, ВЖД
 *  \author Ковшиков С. В
 *  \date 30/11/2017
 */

#include "client-delegates.h"

#include <QTcpSocket>

#include "abstract-data-engine.h"
#include "tcp-structs.h" // delete ???


//-----------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------
AbstractClientDelegate::AbstractClientDelegate(QObject *parent)
    : QObject(parent)
    , name_("")
    , localId_(0)
    , socket_(Q_NULLPTR)
    , engine_(Q_NULLPTR)
{

}



//-----------------------------------------------------------------------------
// Деструктор
//-----------------------------------------------------------------------------
AbstractClientDelegate::~AbstractClientDelegate()
{
    delete engine_;
}



//-----------------------------------------------------------------------------
// Вернуть имя
//-----------------------------------------------------------------------------
QString AbstractClientDelegate::getName() const
{
    return name_;
}



//-----------------------------------------------------------------------------
// Установить имя
//-----------------------------------------------------------------------------
void AbstractClientDelegate::setName(QString name)
{
    name_ = std::move(name);
}



//-----------------------------------------------------------------------------
// Установить сокет
//-----------------------------------------------------------------------------
void AbstractClientDelegate::setSocket(QTcpSocket *sock)
{
    socket_ = sock;
    localId_ = sock->socketDescriptor();
}



//-----------------------------------------------------------------------------
// Вернуть дескриптор сокета
//-----------------------------------------------------------------------------
qintptr AbstractClientDelegate::getId() const
{
    return localId_;
}



//-----------------------------------------------------------------------------
// Установить механизм подготовки данных
//-----------------------------------------------------------------------------
void AbstractClientDelegate::setDataEngine(AbstractDataEngine *engine)
{
    engine_ = engine;
}



//-----------------------------------------------------------------------------
// Вернуть буффер данных принятых от клиента
//-----------------------------------------------------------------------------
QByteArray AbstractClientDelegate::getInputBuffer() const
{
    return engine_->getInputBuffer();
}




//-----------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------
DummyDelegate::DummyDelegate(QObject* parent)
    : AbstractClientDelegate(parent)
{
    name_ = "dummy";
    engine_ = new NullDataEngine();
}

//-----------------------------------------------------------------------------
// Деструктор
//-----------------------------------------------------------------------------
DummyDelegate::~DummyDelegate()
{
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Установить имя (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::setName(QString name)
{
    Q_UNUSED(name);
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Установить сокет (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::setSocket(QTcpSocket *sock)
{
    Q_UNUSED(sock);
    // Ничего не делать
}


//-----------------------------------------------------------------------------
// Установить механизм подготовки данных (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::setDataEngine(AbstractDataEngine *engine)
{
    Q_UNUSED(engine);
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Сохранить буффер запроса от клиента (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::storeInputData()
{
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Установить буффер данных для отправки клиенту (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::setOutputBuffer(QByteArray buf)
{
    Q_UNUSED(buf)
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Отправить результат авторизации (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::sendAuthorizationResponse(ATcp::AuthResponse resp)
{
    Q_UNUSED(resp);
    // Ничего не делать
}

//-----------------------------------------------------------------------------
// Отправить данные клиенту (пустышка)
//-----------------------------------------------------------------------------
void DummyDelegate::sendDataToTcpClient()
{
    // Ничего не делать
}




//-----------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------
ClientDelegate::ClientDelegate(QObject* parent)
    : AbstractClientDelegate(parent)
{

}



//-----------------------------------------------------------------------------
// Деструктор
//-----------------------------------------------------------------------------
ClientDelegate::~ClientDelegate()
{

}



//-----------------------------------------------------------------------------
// Сохранить буффер запроса от клиента
//-----------------------------------------------------------------------------
void ClientDelegate::storeInputData()
{
    if (!socket_->isOpen())
        return;

    // Читаем остатки данных из сокета
    engine_->setInputData(socket_->readAll());
    // Оповещаем о приёме данных
    emit dataReceived(engine_->getInputBuffer());
}



//-----------------------------------------------------------------------------
// Установить буффер данных для отправки клиенту
//-----------------------------------------------------------------------------
void ClientDelegate::setOutputBuffer(QByteArray buf)
{
    engine_->setOutputBuffer(std::move(buf));
}



//-----------------------------------------------------------------------------
// Отправить результат авторизации
//-----------------------------------------------------------------------------
void ClientDelegate::sendAuthorizationResponse(ATcp::AuthResponse resp)
{
    switch (resp)
    {

    // В случае следующих кодов авторизации
    case ATcp::ar_AUTHORIZED:
    case ATcp::ar_NAME_DUPLICATE:
    case ATcp::ar_UNKNOWN_NAME:
    {
        // Создаём массив байт из полученной команды
        QByteArray arr(reinterpret_cast<const char*>(&resp),
                       sizeof(ATcp::AuthResponse));
        socket_->write(arr);
        socket_->flush();
        break;
    }

    default:
        break;
    }
}



//-----------------------------------------------------------------------------
// Отправить данные клиенту
//-----------------------------------------------------------------------------
void ClientDelegate::sendDataToTcpClient()
{
    if (socket_->isOpen())
    {
        // Пишем в сокет данные подготовленные механизмом данных
        socket_->write(engine_->getPreparedData());
        socket_->flush();
    }
}
